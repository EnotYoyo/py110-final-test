# #0. Вам предоставлен json-файл со списком пользователей. Формат объекта пользователей следующий:
# {
#     "name": "Name",  # Имя пользователя. Строка.
#     "surname": "Surname",  # Фамилия пользователя. Строка.
#     "sex": "m",  # Пол пользователя. Строка. Допустимые значения "m" или "f".
#     "age": 42,  # Возраст пользователя. Число. Допустимые значения 18-99
#     "contacts": {  # Объект с контактами пользователя.
#         "email": "my@mail.ru",  # Email. Строка или None. Допустимое значение: валидный email
#         "tel": "+7-931-333-22-22",  # Телефон. Строка или None. Допустимый формат: "+7-xxx-xxx-xx-xx" . (x - цифра от 0 до 9)
#         "site": "my.site.com"  # Url-адрес. Строка или None. Формат: url адрес с поддоменами без протокола, пути и параметров
#     }
# }
# !!! Объекты всегда имеют все поля, но вот формат может быть неверный !!!

# #1. Необходимо написать функцию-генератор, которая принимает путь к json-файлу и парсит его.
# Генератор должен возвращать объекты пользователей.
from typing import Dict, Iterable


def user_generator(file_path: str) -> Iterable[Dict]:
    ...


# Пример работы:
for user in user_generator("some.json"):
    print(user)  # {'name': 'Nqi', 'surname': 'Xglfqo', 'sex': 'f', <и т.д.>}


# #2. Необходимо написать декоратор, который применяется к функции-генератору из пункта 1.
# Декоратор должен проверять возвращаемые из генератора значения с помощью регулярных выражений.
# Если хотя бы одно из полей не соответствует описанному формату, то этот объект должен пропускаться (дропаться).
#
# Помимо этого, декоратор должен среди именнованных аргументов вызываемой функции искать параметр drop_incorrect.
# Если параметр drop_incorrect есть, и он равен False, то функция проверки возврщаемых значений отключается.
# Обратите внимание, что параметр drop_incorrect при этом не передается в декорируемую функцию.

def dropper(func):
    ...


# Работа декорированного генератора
for user in dropper(user_generator)("some.json"):
    print(user)  # {'name': 'Nqi', 'surname': 'Xglfqo', 'sex': 'f', <и т.д.>} -- объекты только с корректными полями

# Работа декорированного генератора с параметром drop_incorrect
for user in dropper(user_generator)("some.json", drop_incorrect=False):
    print(user)  # {'name': 'Nqi', 'surname': 'Xglfqo', 'sex': '!!!', <и т.д.>}
    #                                                           ^^^--- значение некорретно
    #
